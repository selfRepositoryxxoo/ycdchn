学习移动端的书籍：
-》HTML5秘籍第二版（主要讲述的是关于HTML5的基础知识）
-》图解CSS3 （大漠著，主要讲述的是CSS3的基本语法和相关的小DEMO）

 [W3C：万维网联盟]
    ->用来指定HTML/CSS/JS ...规范和标准的一家非盈利机构。
    ->浏览器的开发商需要按照规范来实现浏览器的渲染引擎  谷歌（V8 Webkit） 火狐（Gecko）
    ->页面的开发者也需要按照这套规范来编写代码

    ->有的浏览器开发商能力比较强，除了把规范的都实现外，还自己增加了一些额外的更有助于开发的新的规范和新的方法
    （这一部分新加的规范有一部分以后也会被W3C收录）
    ->但是还有一部分浏览器能力不足，没有把规范都实现出来，但是为了体现自己的优势加了一些自己独有的

    【浏览器兼容问题就是这样出现的】
    -》目前处理浏览器兼容的思想（尤其是对于HTML5和CSS3--》IE678一般不兼容）：
    【浏览器都有一个属于自己的前缀】：
    -webkit- ：(谷歌/safari/UC/移动端的QQ浏览器；目前安卓系统和IOS系统上带的浏览器基本上都是webkit内核的；）
    -moz-    ：火狐浏览器
    -o-      : 欧朋浏览器  Opera
    -ms-     : IE 浏览器

    【处理兼容的两种方式：】
    ->渐进增强：设计出一套兼容或适配所有浏览器的产品（包含低版本浏览器），然后根据高版本浏览器的优势把一些操作效果和体验进行升级
            background:paleturquoise;/*适合所有浏览器的产品*/
            background: -webkit-linear-gradient(top left,red,orange,yellow,green,blue,purple);/*谷歌下增加多背景渐变颜色*/
            background: -moz-linear-gradient(top left,red,orange,yellow,green,blue,purple);/*火狐下增加多背景渐变颜色*/
            background: -o-linear-gradient(top left,red,orange,yellow,green,blue,purple);/*欧朋下增加多背景渐变颜色*/
            background: -ms-linear-gradient(top left,red,orange,yellow,green,blue,purple);
            /*IE下增加多背景渐变颜色，不兼容的依然显示纯色的*/
    ->优雅降级：设计出一套高版本的浏览器的产品（此时低版本浏览器很多效果是无法实现的），然后根据高版本浏览器的优势把一些操作效果和体验进行升级

    例如：小米官网首页，在高版本浏览器下，我们的动画效果大部分采用的是CSS3动画实现的，对于不兼容的低版本浏览器可以采用JS动画来实现

    ->因为CSS3动画的性能比JS动画性能好，JS动画的性能比flash动画性能好


1、HTML5
  -> HTML/XHTML/DHTML:超文本（不仅仅是文本还可以是图片等）标记语言  XHTML比HTML更加的严谨一些，
  DHTML说明页面中的内容是动态绑定的

   ->HTML5是在传统的HTML4的基础上增加一些常用的新的API，对于原有的并没有做太多的修改

   1）新增加了一些用来构建页面结构的语义化标签--->【在IE678中是不兼容的】
   【处理兼容问题的处理方法：】通过条件注释引入一个html5.min.js文件实现标签的替换
           ->首先会把HTML页面中的新标签进行替换
           ->其次会把css样式中用标签选择器来设置样式的部分也进行替换了（为了节省性能，所以我们以后使用新标签布局写样式的时候，
           尽量使用类名写样式，而少用标签选择器设置样式）
       并且插入一句判断的话

           这样引入依然不好,因为只有低于IE9浏览器才不支持HTML5新增加的标签,其它的浏览器都是支持的,这样的话我们只需要在IE6~8中引
           入这段JS即可
           <script charset="utf-8" type="text/javascript" src="js/html5.min.js"></script>

           【下面是通过条件注释引入HTML5.min.js的】
           <!--[if lt IE 9]>
           <script type="text/javascript" src="js/html5.min.js"></script>
           <![endif]-->


           不要直接引用，因为只有IE8以下不支持HTML5，不需要在其他浏览器引入该文件。

      header\footer\nav\section(区域)\ article(文章) \ aside (标注)\ figure (配图)\ figcaption (配图说明)
      \hgroup (副标题,但是目前的编辑器都不会识别这个标签，浏览器识别)

      不管是PC端还是移动端，如果想要进行SEO优化，建议大家使用最新的HTML5语义化标签来搭建页面的结构。


   2）修改或者删除了一些传统的标签
      【修改：】
           <hr/>  之前第一条直线 ，现在虽然体现出来的还是一条直线，但是它的语义化变为了上下区域的分隔符
           <small/> 之前的意思是文字小，现在虽然文字体现的还会小，但是它的意思变成了附属细则
           <strong> 之前是加粗，现在的语义化变为重点强调
      所谓的修改只是在修改标签之前的语义化
      
      【删除：】
         <font>  <big> 
      -->并不是真正的删除不能用了，如果用了，浏览器还是可以渲染出来了，只是不建议使用，因为已经不具备之前的语义化意思了
    3）新增加一些用来标识文本的元素的标签：<mark>  <time>

    4）提出新的音视频处理方案： <audio> 音频  <video> 视频  （业内普遍认为音频和视频是HTML5最具特色的改变之一）
       <audio  id=" " controls preload="auto"></audio>

       controls:使用系统默认的播放器
       preload="auto":默认值auto  加载页面的时候就开始下载整个音频文件了
                      metadata 开始加载页面的时候，只是把头部基本信息加载下来
                      none  开始加载页面的时候什么都不下载，只有播放的时候才开始下载（平时应该都用none,这样打开页面速度不会变慢)
       loop   播放完成后，重复播放
       autoplay 自动播放
      【 用JS实现音乐在页面加载完成之后再进行下载】
       var music = document.getElementById("music"),
           musicAudio = document.getElementById("musicAudio");
       window.setTimeout(function () {
           musicAudio.play();//->让音频播放:浏览器开始下载资源文件,也就是让它播放到出声音还需要一段时间,只有发出声音后我们才会显示音乐的图标
           musicAudio.addEventListener("canplay", function () {
               //->canplay:音频文件已经可以播放了,但是不一定是所有资源都加载完成了,大部分是边播放边界
               music.style.display = "block";
               music.className = "music move";
           }, false);
       }, 1000);
       music.addEventListener("click", function () {
           //->当前是暂停状态我让其播放
           if (musicAudio.paused) {
               musicAudio.play();
               music.className = "music move";
               return;
           }
           //->当前是播放状态我让其暂停
           musicAudio.pause();
           music.className = "music";
       }, false);


       音频文件支持三种格式：mps、wav、ogg但是每一种格式都有部分浏览器不支持，所以想让支持的完善，我们需要准备三种音频格式
        <audio  id=" " controls preload="auto">
           <source src="xxx.mp3" type="audio/mpeg"/>  -->这是mp3的格式的  移动端就用着一种就可以了
           <source src="xxx.mp3" type="audio/wav"/>
           <source src="xxx.mp3" type="audio/ogg"/>
        </audio>

        <audio  preload="none"  src="xxx.mp3"  loop  />


       ->因为在没有HTML5之前我们的音视频播放都需要基于FLASH，如果FLASH播放需要浏览器安装额外的播放插件（FLASH播放存在很多问题）

    5）对于传统的表单元素进行了完善

        -》传统的表单元素：form label input(text,radio,button,checkbox,submit,reset,password,hidden,file)
        select,textarea(文本域)
        ->新增加的其中一部分也是最常用的：对于input增加了很多新的类型和给表单元素新增加了几个属性：
          placeholder="请输入密码"
          <input  type="search url tel email number time data  color range"/>

    6） 新增加了<canvas> 绘图
    7） 提供一些常用的API （方法供别人调用的就是API）
       ->本地存储：webStorage(localStorage\sectionStorage)
       ->获取地理位置信息：

    8）提供了离线存储：（还不是很完善，离线存储文字可以，视频的话不行）

    9）提供了新的客户端和服务器端的交互模式
      webSocket/webWorks
      【实时通讯项目：】长连接、长轮循
        ->长轮循：每隔一定时间向服务器发送请求从而获取到最新数据 （非常消耗服务器性能的）

        ->长连接：向服务器发送请求，服务器不一定立马把内容返回，如果没有最新的数据，可以保持当前连接挂起，
        什么时候有新数据再向客户端返回，客户端接收到数据后绑定，完成绑定立即重启新向服务器发送请求。

      例如：pc端实现微信实时聊天








