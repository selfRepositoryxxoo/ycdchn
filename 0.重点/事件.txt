
事件：两部分：
1.行为本身：

浏览器天生就赋予其的行为如onmouseover （onmouseenter）onmouseout(onmouseleave) onmousemove  onmousedown
     onmouseup onmouseweel(鼠标滚轮滚动行为) onscroll(滚动条滚动事件) onresize(重置大小)(window.onresize)浏览器窗口大小改变事件 onload  onunload (浏览器关闭的时候) onfocus(文本框获取光标) onblur(文本框失去光标) onkeydown(键盘的按下) onkeyup(抬起) onkeypress(按着不放)onclick  onreadstate()等

    2）->onmouseenter/onmouseover的区别:
             //1)onmouseenter默认阻止了事件的冒泡传播(因为就好像你进入了一个房子，再进入任意一个房间不会再次出发时间，因为都属于这个房子）,子元素的onmouseenter事件被触发,父级元素的相关事件不会被触发;
        但是onmouseover存在冒泡传播;
              //2)红盒子是绿盒子的子元素,当鼠标从绿盒子进入红盒子,在从红盒子进入绿盒子,会重新的触发绿盒子的onmouseover事件       ,但是不会触发绿盒子的onmouseenter事件;
         -->哪怕我没有给上述的行为绑定方法。事件也是存在的，当我们点击这个盒子的时候，同样会触发它的onclick事件，
         只是什么事情都没有做而已
       //->事件绑定:给元素的某一个行为绑定方法,当行为触发的时候执行对应的方法

2、事件绑定：
   1).[DOM零级事件绑定]:
      DOM零级事件绑定的原理：给元素对象的某一个事件私有的属性赋一个值（一个函数值），当元素的事件触发的时候，找到对应的属性值，并且让其执行即可。
        onclick这个行为是定义在当前元素的私有属性上
      //->DOM零级事件绑定只能给元素的某一个事件绑定一次方法，最后一次绑定的方法会把之前所有绑定的方法覆盖掉。

         //oBox.onclick=null;移除绑定
         //    function fn() {
         //        console.log("ok");
         //    }
         //    oBox.onclick = fn;//->绑定方法的时候fn没有执行,当行为触发的时候,浏览器才会执行fn这个方法
         //    oBox.onclick = fn();//->绑定方法的时候就把fn执行了,这里是把fn执行的返回结果undefined绑定给元素的点击行为(这样写是不行的)
         //    oBox.onclick = (function () {
         //        return function () {
         //
         //        }
         //    })();//->绑定方法的时候就把自执行函数执行了,把它的返回值"匿名函数"绑定给元素的点击行为,当行为触发的时候,执行里面小的“匿名函数”


         //    oBox.onclick = function () {//我们把匿名函数的部分当做一个值赋值给oDiv的点击行为，（函数表达式）
         //        console.log(1);
         //    };
         //    oBox.onclick = function () {
         //        console.log(2);
         //    };

         //->当点击行为触发的时候,只把最后一次绑定的方法执行了,第一次绑定的方法并没有执行：“DOM零级事件绑定,只能给当前元素的某一个行为绑定一个方法,绑定的最后一个方法会把前面的所有绑定的方法给覆盖掉”


    2).--》[DOM二级事件绑定]
    在IE6-8中不支持addEventListener,应该用attachEvent/detachEvent来实现DOM2的绑定和移除,但是需要添加“on”（和DOM0特别相似)
    但是不能控制在哪个阶段发生，默认在冒泡阶段。
    --》原理：我们把需要给当前的某一个事件绑定的方法都放在内置的“事件池”中。当事件触发的时候，会把事件池中对应的所有方法依次的去执行。。。
    --->在当前元素对象所属类EventTarget的原型上,提供了两个方法:addEventListener/removeEventListener实现DOM二级事件绑定和移除绑定
     --->DOM二级事件绑定可以给当前元素的某一个行为绑定多个“不同的”方法，当事件触发的时候，会到对应的事件池中把所有绑定的方法依次去执行。(如果方法相同了,只保留一个)
   ---》DOM零级事件绑定和DOM二级事件绑定可以共存,不冲突(DOM0和DOM2的事件处理机制是不一样的:DOM0其实就是对象的属性名和属性值操作的机制(onclick就是一个属性名,绑定的方法就是它的一个属性值,当行为触发的时候获取到属性值执行即可),DOM2的机制是使用了浏览器的事件池/事件队列的机制完成的)
      -->DOM2 可以给元素的某一个事件行为绑定多个方法的机制：
         1.当事件触发的时候执行对应的方法们，此时不管哪个方法中的THIS都是当前元素
         2.我们按照绑定的先后顺序，分别把绑定的方法增加到内置的事件池当中，先绑定的在前，后绑定的在事件池最后面。
         当事件触发的时候，首先到指定的事件池中，按照从上到下的顺序分别依次的执行事件池存储的方法。
         3.如果当前的这个方法已经给元素的这个行为绑定过了，再绑定也不会往事件池中重复增加了。所以导致了只能给元素的某个行为绑定多个不重复的方法。
         *****DOM2级事件绑定中，我们一般绑定的都是实名函数，只有这样，以后移除的时候才知道具体要移除谁。绑定匿名函数，后期是无法移除的。
        // 在IE6-8中不支持addEventListener,应该用attachEvent/detachEvent来实现DOM2的绑定和移除。
        并且在IE6-8中绑定的方法只能在冒泡阶段发生，不能控制在捕获阶段发生。（所以捕获阶段项目中一般不用）

 ********[DOM2级事件绑定在标准浏览器和IE6-8的兼容性问题总结]
         //1. 绑定所用的方法及语法是不一样的
         //2. “this问题”：事件触发，执行对应的每一个方法的时候，标准浏览器下的方法中的this是当前的元素，
         IE6-8下方法中的this是window
         //3. "重复问题"：标准浏览器中，当前元素的某一个事件绑定的所有方法中不能重复，如果绑定过就不再重复绑定了，所以最后执行的时候只执行一次；但是IE6-8下，没有实现去重，哪怕方法重复了，也会给当前元素绑定上，执行的时候，绑定几次就重复执行几次。
         //4. “顺序问题”：标准浏览器下方法的执行的顺序是按照绑定的顺序依次执行的，但是IE6-8下执行的顺序和绑定的顺序没啥关系，是混乱的。


        document.body.attachEvent("onclick",fn1);//
        document.body.detachEvent("onclick",fn1);
         //    function fn() {
         //        console.log("ok");
         //    }
         //    oBox.addEventListener("click", function () {
         //        console.log(1);
         //    }, false);//最后一个参数一般都写false，让绑定的方法在事件的冒泡传播阶段执行；true-》让方法在事件传播的捕获阶段执行。
         //    oBox.addEventListener("click", function () {
         //        console.log(2);
         //    }, false);
          oBox.removeEventListener("click", function () {
                    console.log(2);
            }, false);--》不能移除上边那个匿名函数，因为两个匿名函数并不是同一个。
         //    oBox.addEventListener("click", fn, false);
        //    oBox.removeEventListener("click", fn, false)--》移除的时候需要保证三个参数值和绑定的时候一模一样。


            addEventListener这个属性是定义在当前这个元素所属EventTarget这个类的原型上的
         //    oBox.onclick = function () {
         //        console.log(0);
         //    };
         //    oBox.addEventListener("click", function () {
         //        console.log(1);
         //    }, false);
         //    oBox.addEventListener("click", function () {
         //        console.log(2);
         //    }, false);
         //->

         //2、
         //->DOM0中的事件行为在DOM2中依然可以进行使用,但是DOM2还单独的提了一些DOM0中没有的行为：DOMContentLoaded...

        【 //面试题：window.onload和$(document).ready()的区别?】
         //window.onload:只有页面中的HTML结构、图片、文字等所有资源都加载完成才会触发这个行为;在同一个页面中只能使用一次;
         //->因为window.onload是DOM0事件绑定,只能给其绑定一个方法(只能执行一次),onload就是所有资源都加载完成才会执行;
         //->他也可以使用多次,需要使用DOM2绑定
         //    window.addEventListener("load", function () {
         //        console.log(1);
         //    }, false);
         //    window.addEventListener("load", function () {
         //        console.log(2);
         //    }, false);

         //$(document).ready():jQuery中的方法,只要DOM树加载完成，不理会图像、Javascript、CSS文件或其他资源，就会触发对应的行为;在同一个页面中可以使用多次;
         //->因为jQuery中使用的是DOM2绑定所以可以执行多次;因为使用的是DOMContentLoaded这个行为,所以只需要HTML结构加载完成就会触发;
         //    window.addEventListener("DOMContentLoaded", function () {
         //        console.log(1);
         //    }, false);
         //    window.addEventListener("DOMContentLoaded", function () {
         //        console.log(2);
         //    }, false);

         //3、DOM0事件绑定兼容所有的浏览器,DOM2事件绑定兼容性特别差(IE6~8和标准浏览器之间的区别)

         //4、在移除绑定方法的时候也有一些细节的问题需要重点考虑
         //    oBox.onclick = function () {
         //        console.log(0);
         //    };
         //    oBox.onclick();//->除了手动点击可以执行以外,还可以在JS中通过获取属性值的方式去执行
         //    oBox.onclick = null;//->移除:不需要管之前绑定的是啥方法

         //->(function(){})===(function(){}) ->false不是同一个堆内存地址
         //->以后处理DOM2绑定的时候,需要"瞻前顾后":绑定的是要想着我可能还会移除呢,所以我们绑定的方法基本上都是实名函数
         //    function fn() {
         //        console.log(1);
         //    }
         //    oBox.addEventListener("click", fn, false);
         //    oBox.removeEventListener("click", fn, false)


?1、DOM零级事件常用的都有哪些?
   onclick、onmouseover、onmousemove、onmouseout、onmouseenter、onmouseleave、onmousedown、onmouseup、onmousewheel、onkeydown、onkeyup、onblur(文本框失去焦点事件)、onfocus(文本框获取焦点事件)、onchange、onscroll、onload、onreadystatechange...

    事件是由：事件行为本身、给事件绑定方法 两部分组成 ->哪怕你没有给元素绑定方法，当点击的时候也出发了click这个行为本身

********事件对象(e=e||window.event)常用的属性和兼容处理
 //1)DOM零级事件绑定(onxxx=function...)、DOM二级事件绑定(在元素对象原型链上的EventTarget这个类就是DOM二级事件绑定的类,在EventTarget.prototype上提供了addEventListener/removeEventListener就是DOM二级事件绑定/移除事件绑定的方法)
    //2)单从性能角度来说,我们的DOM0级事件绑定要优于DOM2级事件绑定(零级找的都是自己的私有的属性，而二级是通过原型一级级的查找才找到的)

    //JS的事件:既是我们没有给当前的行为绑定方法,当我们操作的时候也会把对应的行为触发,只不过触发后什么事情都没做而已

    //2、事件对象
    //->给元素的某一个行为绑定方法,当行为触发的时候,会把对应绑定的方法执行(方法中的this是当前的元素->DOM0);
    //->其实不仅仅把这个方法执行了,浏览器还会默认的给这个方法传递一个参数值(在标准浏览器中是这样的机制,IE6~8的机制不是这样的)==>"事件对象":里面存储的都是当前本次操作的相关信息(鼠标操作的信息或者是键盘操作的信息等)

    //1)鼠标事件对象(它是MouseEvent这个类的一个实例,它是一个对象数据类型值，这些都是记录鼠标相关信息的。
      2）鼠标事件对象(包含很多自己的私有属性)
      原型->MouseEvent.prototype(initMouseEvent/getModifierState)->UIEvent.prototype(initUIEvent)->Event.prototype(initEvent/preventDefault/stopImmediatePropagation/stopPropagation)->Object.prototype)
      3）MouseEvent 记录的是页面中唯一一个鼠标每一次触发时候的相关信息，和到底是在哪个元素上触发的没有关系

    //2)键盘事件对象(它是KeyboardEvent这个类的一个实例;键盘事件对象(包含很多自己的私有的属性)->KeyboardEvent.prototype(getModifierState/initKeyboardEvent)->UIEvent.prototype->Event.prototype->Object.prototype)
    e.keyCode:-->当前键盘上每一个键对应的值
       空格：space键--》32
       回退键--》Backspace-->8
       回车键  Enter-->13
       删除键 Del   --》46
       四个方向--》左 37 上 38  右 39  下 40



    //    oBox.onclick = function () {
    //        console.dir(arguments[0]);
    //    };
    //    document.onkeyup=function(){
    //      /**/  console.dir(arguments[0]);
    e.keyCode:-->当前键盘上每一个键对应的值
    //    };

*****/3、关于事件对象中常用的属性以及兼容处理
    //->

     1.e [存在兼容性]
    在IE6~8下,我们的浏览器并不是把"事件对象"当做一个参数传递进来的,而是把事件对象存储到了
        window.event当中了 ->e = e || window.event;

    //->鼠标事件对象其实就是,存储一些关于“当前本次操作”,鼠标的一些“相关的信息”(例如:鼠标操作点的坐标信息等等);而页面中只有一个鼠标,当前本次操作,不管是那个元素行为对应的方法,方法中获取到的e其实都是这个鼠标本次操作的信息,所以是一样的内容;

    //->当我进行第二次操作的时候,又重新获取了本次操作的鼠标相关信息,并且这些信息会把上一次存储的信息给覆盖掉;

    //->我们可以利用window.event来理解就简单了:window下只有一个event属性,每一次不管哪个方法都是获取这一个属性的值,所以是相同的;下一次操作也是把值存储到这个属性中了,会把上一次的给覆盖掉;
    //    oBox.onclick = function (e) {
    //        e = e || window.event;
    //        console.log(e);
    //    };
    //    document.body.onclick = function (e) {
    //        e = e || window.event;
    //        console.log(e);
    //    };



******常用的属性：
     2.e.type:
     3. e.clientX/e.clientY:
     当前本次操作的行为类型  type:"click"
    oBox.onclick = function (e) {
        e = e || window.event;
        console.log(e);
        //->e.type:当前本次操作的行为类型  type:"click"
        //->e.clientX/e.clientY:当前鼠标的触发点距离当前窗口(不是距离BODY)X轴/Y轴的坐标

     4.e.target  [存在兼容性问题]

        //->e.target:事件源(鼠标是在哪个元素上触发的这个行为,那么当前的事件源就是谁) 在IE6~8中是不存在e.target的值，e.target是undefined,只能使用e.srcElement
        e.target = e.target || e.srcElement;

     5. e.pageX/e.pageY:[存在兼容性问题]

        //->e.pageX/e.pageY:当前鼠标的触发点距离BODY的X轴/Y轴的坐标(在IE6~8中是不存在这两个属性的)
        e.pageX = e.pageX || ((document.documentElement.scrollLeft || document.body.scrollLeft) + e.clientX);
        e.pageY = e.pageY || ((document.documentElement.scrollTop || document.body.scrollTop) + e.clientY);

     6.e.preventDefault [兼容性]
        //->e.preventDefault:阻止默认行为(阻止浏览器天生的一些行为)

        兼容性写法：
        e.preventDefault ? e.preventDefault() : e.returnValue =false;
         return false;//这个的效果也是一样的，也是阻止默认的行为

      7.stopPropagation [兼容性问题]
           e.stopPropagation？e.stopPropagation():e.cancelBubble=true;-->阻止事件的冒泡传播
      8. 比如a标签  href="javascript:;" href="javascript:void 0;"  href="javascript:void 1;"  直接在HTML中阻止默认行为
       JS中阻止a标签默认行为的方法：
        oLink.onclick = function () {//->当点击的时候是先把click事件触发,然后才会执行自己的默认跳转操作
         //            return false;
         //        };

                 oLink.onclick = function (ev) {
                     ev = ev || window.event;
                     ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;
                 };

         //    oLink.onclick = function (ev) {
         //        if (!ev) {
         //            ev = window.event;
         //            ev.preventDefault = function () {
         //                ev.returnValue = false;
         //            }
         //        }
         //        ev.preventDefault();
         //    };

4、事件的传播机制：捕获阶段、冒泡阶段(常用)
        oBody.addEventListener("click", function (ev) {
             console.log("body");
        }, false);//->false:控制当前的方法是在事件的冒泡传播阶段执行 true->控制其在捕获阶段执行(一般不用)
       //->事件的冒泡传播:当前元素的某一个行为被触发,那么它所有父级元素的相关行为都会被触发,这种事件的传播机制叫做“冒泡传播”
       //inner->outer->body->html->document 由里向外依次传播的

[京东的放大镜、鼠标跟随...]

5、事件委托：
    事件委托：利用了事件的冒泡传播机制，当容器中某个子元素的相关行为触发，当前容器的相关行为也会被触发，如果给容器的这个事件绑定了方法，方法也会被执行，在执行的时候我们可以获取到事件源(存储的是当前操作的是哪个元素)，我们可以通过事件源是谁来做不同的操作...
    ->这个非常的重要，有很多项目不使用这个是无法解决的，并且用事件委托处理比一个个的给很多元素绑定事件的性能会提升在一倍左右

[级联菜单、类似于百度搜索框的效果... http://www.zhufengpeixun.com/viewer.do?courseId=975021#currentPlaying=1755887]

6、DOM0和DOM2事件做对比,凸显出我们DOM2的一些优势?
  "DOMContentLoaded"是DOM2新增加的
  ->window.onload和$(document).ready() 关于这个两个的区别，需要大家深入到事件的核心机制和jQuery源码实现去解读

7、事件池/事件队列的机制 ->DOM2的三个兼容问题:this问题、重复问题、顺序问题
   bind、unbind、on、off、run 来解决兼容问题
   这里涉及到了很多的编程思想，都是非常的重要的(回调函数、如何化妆和记录化妆前的效果、利用自定义属性存储多个值进行过滤、数组塌陷问题...)

[拖拽->鼠标焦点丢失的问题如何的去解决->如何的改变this...]